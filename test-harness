#!/usr/bin/php
<?
# abstraction of virtual machines under differing hypervisors to a single
# testable environment
#  - lxc (linux containers)
#  - vmware (fusion/osx, linux...)
# NOTE: presently only vmware fusion/osx PoC code present

# ---- initialisation -----------------
global $settings;
$settings['debug'] = 1;
# first we determine which operating system we are running under in order
# to ascertain the correct paths to the vmware tools
$settings['_possible_vmware_dirs'] = array(
	'/Library/Application Support/VMware Fusion/', # OSX
	'/usr/lib/vmware-vix/lib', # Unclear if absolute paths are required. Linux.
);
# loop through possible directories until we determine a match
global $settings;
$settings['vmware_dir'] = '';
foreach($settings['_possible_vmware_dirs'] as $dir) {
 if(file_exists($dir . '/vmrun')) {
  $settings['vmware_dir'] = $dir;
 }
}
# test for presence
if($settings['vmware_dir'] == '') {
 warning("Unable to ascertain VMWare directory. VMWare management unavailable.");
}

# ---- proof of concept code ----------------------------
# if vmware unavailable, die
if($settings['vmware_dir']=='') { error("Proof of concept requires VMWare support."); }

# set VM for testing
$vm = '/Users/user/Documents/Virtual Machines.localized/Gentoo.vmwarevm/Gentoo.vmx';
$vm_ip = '192.168.82.129';

# validate the configuration
vm_config_sanitise($vm);

# check it's not already running
if(vm_is_running($vm)) {
 warning("The VM '$vm' is already running! Stopping now...");
 vmware_vm_stop($vm);
 debug("VM '$vm' stopped.");
}
debug("Passed test for already running - good to proceed!");

# start the VM
print "Attempting to start VM '$vm'... ";
if(vmware_vm_start($vm)) {
 print "done.\n";
}
else {
 print "FAILED.";
 error('Unable to start VM, execution aborted.');
}

# check it's actually network accessible
print "Checking IP '$vm_ip' responds to ping";
if(ip_responds_to_ping($vm_ip,30,1)) {
 print " great, it's up!\n";
}
else {
 print " damn, it's not up - yet?\n";
 error('Unable to contact VM via IP after starting, execution aborted.');
}

# now we can use SSH to deploy code, etc.
print "WIN!\n";
sleep(2); # make sure SSH is up

# test ssh
print "Testing execution on VM via SSH... ";
$result = remote_ssh_exec($vm_ip,'uname -a');
print "result was '$result'.\n";

exit(0);

# execute a command on a remote IP via SSH,
# and return the results.
#  - note that this requires key based 
#    authentication to be set up already!
function remote_ssh_exec($ip,$cmd) {
 exec("ssh -l root " . escapeshellcmd($ip) . ' ' .  escapeshellcmd($cmd),$output_lines);
 $tr = join("\n",$output_lines);
 return $tr;
}

# check an ip is alive
#  $ip          IP to check
#  $max_tries   Maximum number of attempts (~1 sec/attempt)
#  $output_dots Set to true if you want ... style status updates.
function ip_responds_to_ping($ip,$max_tries=1,$output_dots=0) {
 for($i=0;$i<$max_tries;$i++) {
  $output_dots? print '.' : null;
  $output_lines = ''; # otherwise, exec() just builds the buffer forever...
  $cmd = 'ping -c 1 -t 1 -q ' . escapeshellarg($ip);
  debug("ip_responds_to_ping(): command is - $cmd");
  $lastline = exec($cmd,$output_lines);
  $tmp = join("\n",$output_lines);
  debug("ip_responds_to_ping(): output - $tmp");
  if(preg_match('/, 0.0% packet loss/',$tmp)) { return true; }
 }
 debug("ip_responds_to_ping() failed for IP '$ip' after $max_tries attempt(s).");
 return false;
}

# stop a vm
function vmware_vm_stop($path) {
 global $settings;
 exec(escapeshellarg($settings['vmware_dir'] . '/vmrun') . ' stop ' .  escapeshellarg($path));
}

# start a vm
function vmware_vm_start($path) {
 global $settings;
 exec(escapeshellarg($settings['vmware_dir'] . '/vmrun') . ' start ' .  escapeshellarg($path));
 # had sleep...
 if(vm_is_running($path)) {
  return true;
 }
 return false;
}

# check status
function vm_is_running($path) {
 $running_vms = vmware_running_vms();
 debug("Is '$path' in " . join('|',$running_vms) . "?");
 debug($path);
 foreach($running_vms as $tmp) {
  debug($tmp);
 }
 if(in_array($path,$running_vms)) {
  debug(" ... Yes.");
  return true;
 }
 debug(" ... No.");
 return false;
}

# return a list of running virtual machines
function vmware_running_vms() {
 global $settings;
 $running_vms = array();
 exec(escapeshellarg($settings['vmware_dir'] . '/vmrun') .  ' list',$output_lines);
 foreach($output_lines as $line) {
  if(preg_match('/^Total running VMs:/',$line)) {
   # this is the summary line, ignore
  }
  else {
   # this is going to be an absolute filesystem path to the VM image
   debug("detected as running -> " . $line);
   array_push($running_vms,$line);
  }
 }
 return $running_vms;
}

# sanitise the VM configuration supplied
#  at the moment, this means ensuring that the 'msg.autoAnswer = TRUE'
#  option is set, to prevent dialog boxes timing out the startup.
function vm_config_sanitise($path) {
 return true; # stub
 debug("vm_config_sanitise() called on '$path'");
 $cmd = 'cat ' . escapeshellarg($path);
 `$cmd`;
 exit(1);
}


########## general functions ########

# warning
function warning($string) {
 print "WARNING: $string\n";
}

# error
function error($string) {
 print "ERROR: $string\n";
 exit(1);
}

# debug
function debug($string) {
 global $settings;
 if($settings['debug']) {
  print "DEBUG: $string\n";
 }
}


?>
