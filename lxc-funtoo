#!/bin/bash

###############################################################################
#
#  lxc-funtoo : script to create a funtoo lxc guest
#  
#   license: 
#    - GPLv3 (you know the deal...)
#
#   requires:
#    - kernel with relevant options enabled (see lxc-checkconfig)
#    - wget and a working internet connection for HTTP fetches
#    - iptables
#    - bridge-utils
#
#   output environment description:
#    - uses the latest stage3 and portage
#    - creates a veth/bridge-connected guest
#       - veth is a virtual ethernet interface, assigned to the guest
#       - bridge is like a software-switch interface on the host
#       - requires some host configuration, eg:
#          # install bridge utils package, eg: on gentoo 'emerge bridge-utils'
#          brctl addbr br0           # create bridge
#          brctl setfd br0 0         # set forward delay to 0 seconds
#          ifconfig br0 172.20.0.1   # set an IP for the bridge
#          # ...iptables SNAT stuff...
#    - typical startup time is <2 seconds
#    - very fast disk IO (unlike paravirtualised solutions)
#   
#   notes:
#    - because lxc.network.* directives currently cannot set additional routes
#      it may be necessary to set these in-guest... see /etc/conf.d/net.example
#    - because the network interface is already 'up', the net.eth0 init 
#      script is not used during system startup.  this may affect init scripts
#      with 'need net' dependencies
#    - dedicated to all fellow ethical unix hackers who do not work for 
#      morally corrupt governments and corporations: use your powers for good!
#
#   todo:
#    - support for 'hardened' and selinux
#    - support for alternate network configurations
#    - support for reading from -f file for config on create
#
###############################################################################

DISTRO="funtoo"
CACHE="/var/cache/lxc/${DISTRO}"

# Static defines
WGET="wget --timeout=8 --read-timeout=15 -c -t10 -nd"

# Defaults only
NAME=${NAME:-funtoo}
UTSNAME=${UTSNAME:-funtoo}
IPV4=${IPV4:-172.20.0.88/24}
GATEWAY=${GATEWAY:-172.20.0.1}
GUESTROOTPASS=${GUESTROOTPASS:-toor}
if [ `uname -m` == "x86_64" ]; then
 ARCH=${ARCH:-x86_64bit}
 SUBARCH=${SUBARCH:-generic_64}
else
 ARCH=${ARCH:-x86_32bit}
 SUBARCH=${SUBARCH:-i686}
fi
CONFFILE="${UTSNAME}.conf"

# These paths are within the container so do not need to obey configure prefixes
INITTAB="/etc/inittab"
FSTAB="/etc/fstab"

#ENABLE_SSH, change to "Yes" to enable
ENABLE_SSH="No" 
################################################################################
#                    DISTRO custom configuration files
################################################################################

# populate /dev
populate_dev() {
	DEV="${ROOTFS}/dev"
	rm -f ${DEV}/null ; mknod -m 666 ${DEV}/null c 1 3
	mknod -m 666 ${DEV}/zero c 1 5
	mknod -m 666 ${DEV}/random c 1 8
	mknod -m 666 ${DEV}/urandom c 1 9
	mkdir -m 755 ${DEV}/pts
	mkdir -m 1777 ${DEV}/shm
	mknod -m 666 ${DEV}/tty c 5 0
	mknod -m 666 ${DEV}/tty0 c 4 0
	mknod -m 666 ${DEV}/tty1 c 4 1
	mknod -m 600 ${DEV}/console c 5 1
	mknod -m 666 ${DEV}/full c 1 7
	mknod -m 600 ${DEV}/initctl p
	mknod -m 666 ${DEV}/ptmx c 5 2
}
# custom fstab

write_distro_fstab() {
cat <<EOF > ${ROOTFS}/${FSTAB}
# required to prevent boot-time error display
none / none defaults 0 0
tmpfs  /dev/shm   tmpfs  defaults  0 0
EOF
}

# custom inittab
write_distro_inittab() {
sed -i 's/^c[2-9]/#&/' ${ROOTFS}/${INITTAB} # disable spawning except on tty1
echo "# Lxc main console" >> ${ROOTFS}/${INITTAB}
echo "1:12345:respawn:/sbin/agetty 38400 console linux" >> ${ROOTFS}/${INITTAB}
}

# custom network configuration
write_distro_network() {
# /etc/resolv.conf
grep -i 'search ' /etc/resolv.conf > ${ROOTFS}/etc/resolv.conf
grep -i 'nameserver ' /etc/resolv.conf >> ${ROOTFS}/etc/resolv.conf
# funtoo network configuration
cat <<EOF > ${ROOTFS}/etc/conf.d/net

# eth0
#  - lxc virtualised network adapter of type 'veth'
#  - the interface is bridged to the br0 'virtual switch' on the host machine.
#     - host br0 is managed with the bridge-utils package, ie:
#        brctl addbr br0
#        brctl setfd br0 0
#        ifconfig br0 172.20.0.1
#       ... or, on a gentoo host run:
#        # create init script
#        cd /etc/init.d && ln -s net.lo net.br0
#        # specify configuration
#        echo 'config_br0=( "172.20.0.1 netmask 255.255.0.0" )'>>/etc/conf.d/net
#        echo 'brctl_br0=( "setfd 0" "sethello 10" "stp off" )'>>/etc/conf.d/net
#        # bring up interface
#        /etc/init.d/net.br0 up
#        # set interface to start on boot
#        rc-update add net.br0 default
#
#     - host grants connectivity using iptables, eg:
#        EXTIF=eth0 # internet facing interface on the host
#        IP=\`ifconfig \$EXTIF|grep 'inet addr'|cut -d':' -f2|cut -d' ' -f1\`
#        iptables -t nat -A POSTROUTING -o \$EXTIF \\ 
#         -j SNAT --to-source \$IP
#       ... on a gentoo host, assuming external interface IP remains static
#           between reboots, then after running the above execute:
#             /etc/init.d/iptables save
#             rc-update add iptables default
#
# required to allow for the net.eth0 script to come up and resolve any
# openrc init system dependencies on 'net'
config_eth0=( "${IPV4}" )
#
# this entry is required since lxc.* directives on the host's lxc.conf
# cannot yet (2010/11) pre-initilise default routes for a guest
routes_eth0=( "default via ${GATEWAY}" )
EOF
(cd ${ROOTFS}/etc/init.d ; ln -s net.lo net.eth0)
ln -s /etc/init.d/net.eth0 ${ROOTFS}/etc/runlevels/default/net.eth0
}

# custom hostname
write_distro_hostname() {
 echo -n " - setting hostname... "
 cat <<EOF > ${ROOTFS}/etc/conf.d/hostname
HOSTNAME=${UTSNAME}
EOF
 echo "done."
}

# fix init system
write_distro_init_fixes() {
	#thanks openrc, now it is simple :)
	sed 's/^#rc_sys=""/rc_sys="lxc"/g' -i ${ROOTFS}/etc/rc.conf
}

# custom sshd configuration file
write_distro_sshd_config() {

 # disabled...
 [[ $ENABLE_SSH == "Yes" ]] || return

 echo -n " - enabling sshd... "
 #ln -s /etc/init.d/sshd ${ROOTFS}/etc/runlevels/default/sshd
 chroot ${ROOTFS} rc-update add sshd
 echo "done."
}

################################################################################
#                        lxc configuration files
################################################################################

write_lxc_configuration() {
 echo -n " - writing LXC guest configuration... "
cat <<EOF > ${CONFFILE}
# set arch
lxc.arch = ${LXC_ARCH}

# set the hostname
lxc.utsname = ${UTSNAME}

# network interface
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = br0
# For now, lxc can't set default gateway,
# so whole network config is set directly inside guest
# lxc.network.ipv4 = 0.0.0.0

# root filesystem location
lxc.rootfs = `readlink -f ${ROOTFS}`

# console access
lxc.tty = 1
lxc.pts= 128

# this part is based on 'linux capabilities', see: man 7 capabilities
#  eg: you may also wish to drop 'cap_net_raw' (though it breaks ping)
lxc.cap.drop = sys_module mknod mac_override sys_boot

# deny access to all devices by default, explicitly grant some permissions
#
#  format is [c|b] [major|*]:[minor|*] [r][w][m]
#             ^     ^                   ^
# char/block -'     \`- device number    \`-- read, write, mknod
#
# first deny all...
lxc.cgroup.devices.deny = a
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rw
lxc.cgroup.devices.allow = c 1:5 rw
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rw
lxc.cgroup.devices.allow = c 1:8 r
# /dev/pts/*
lxc.cgroup.devices.allow = c 136:* rw
lxc.cgroup.devices.allow = c 5:2 rw
# /dev/rtc -- disabled as it seems to fail anyway
#lxc.cgroup.devices.allow = c 254:0 r
# /dev/tty{1,2}
lxc.cgroup.devices.allow = c 4:1 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 5:1 rwm

EOF
 echo "done."
}

set_guest_root_password() {
  echo -n " - setting guest root password.. "
  echo "root:$GUESTROOTPASS" | chroot ${ROOTFS} chpasswd
  echo "done."
}

create() {

  if [[ -z ${QUIET} ]]
  then
    # choose a container name, default is already in shell NAME variable
    echo -n "What is the name for the container ? [${NAME}] "
    read _NAME_

    if [ ! -z "${_NAME_}" ]; then
	NAME=${_NAME_}
    fi

    # choose a hostname, default is the container name
    echo -n "What hostname do you wish for this container ? [${UTSNAME}] "
    read _UTSNAME_

    if [ ! -z "${_UTSNAME_}" ]; then
	UTSNAME=${_UTSNAME_}
    fi

    # choose an ipv4 address, better to choose the same network than
    # your host
    echo -n "What IP address do you wish for this container ? [${IPV4}] "
    read _IPV4_

    if [ ! -z "${_IPV4_}" ]; then
	IPV4=${_IPV4_}
    fi

    # choose the gateway ip address
    echo -n "What is the gateway IP address ? [${GATEWAY}] "
    read _GATEWAY_

    if [ ! -z "${_GATEWAY_}" ]; then
	GATEWAY=${_GATEWAY_}
    fi

    # choose the architecture
    echo -n "Which funtoo architecture should we use in this container ? [${ARCH}] "
    read _ARCH_
    if [ ! -z "${_ARCH_}" ]; then
    	ARCH=${_ARCH_}
    fi

    LXC_ARCH="x86_64bit"
    # if x86 is given prompt for "subarch"
    if [ "${ARCH}" == 'x86_32bit' ]; then
      echo -n "Sub architecture of x86_32bit ? [${SUBARCH}] "
    	read _SUBARCH_
      if [ ! -z "${_SUBARCH_}" ]; then
        SUBARCH=${_SUBARCH_}
      fi
      LXC_ARCH="${SUBARCH}"
    fi
    
    # Type guest root password
    echo -n "Type guest root password:"
    stty -echo
    read GUESTROOTPASS
    echo ""
    echo -n "Confirm guest root password:"
    read GUESTROOTPASS_CONFIRM
    echo ""
    stty echo
    echo ""

    if [ $GUESTROOTPASS != $GUESTROOTPASS_CONFIRM ]; then
      echo "Guest root passwords do not match :( ... exiting."
      exit 1
    fi
  fi

    CONFFILE="${UTSNAME}.conf"
    echo "Thanks!  Now sit back and relax while your funtoo brews...

"
    if which fortune 1>/dev/null 2>/dev/null ; then
     echo '-----------------------------------------------------------------'
     fortune
     echo '-----------------------------------------------------------------'
     echo ''
    fi

    # the rootfs name will be built with the container name
    ROOTFS="./${NAME}"

    # check if the rootfs does already exist
    if [ ! -e "${ROOTFS}" ]; then
	    mkdir -p /var/lock/subsys/
	(
	    flock -n -x 200


	    RES=$?
	    if [ "${RES}" != "0" ]; then
		echo "Cache repository is busy."
		break
	    fi

	    # check the mini distro was not already downloaded
            TEMPLATE="${CACHE}/${ARCH}_${SUBARCH}_rootfs"
	    echo -n "Checking for pre-existing cache in ${TEMPLATE}... "
	    if [ ! -e "${TEMPLATE}" ]; then

		echo "not found."

    # make unique variables for x86 and amd64 since stage3 url are different
    echo -n "Generating strings to run... "
    if [ $ARCH == 'x86' ]; then
      STAGE3URL="http://ftp.osuosl.org/pub/funtoo/funtoo-current/${ARCH}/${SUBARCH}/stage3-current.tar.xz"
  else
      STAGE3URL="http://ftp.osuosl.org/pub/funtoo/funtoo-current/${ARCH}/${SUBARCH}/stage3-current.tar.xz"
    fi

        echo -n "Downloading funtoo ${ARCH} (~120MB), please wait... "
		${WGET} -O ${CACHE}/stage3-current.tar.xz "${STAGE3URL}" 1>/dev/null 2>/dev/null

		RESULT=$?
		if [ "${RESULT}" != "0" ]; then
		    echo "failed!"
		    exit 1
		fi
		echo "complete."

		# make sure we are operating on a clear rootfs cache
		rm -Rf "${TEMPLATE}" #1>/dev/null 2>/dev/null
		mkdir -p "${TEMPLATE}" #1>/dev/null 2>/dev/null

		echo -n "Extracting stage3 archive... "
		tar xpfJ ${CACHE}/stage3-current.tar.xz -C "${TEMPLATE}" 1>/dev/null 2>/dev/null
		echo "done."
		echo -n "Downloading ${DISTRO} portage (software database) snapshot... "
		rm -f ${CACHE}/portage-current.tar.xz 1>/dev/null 2>/dev/null
		${WGET} -O ${CACHE}/portage-current.tar.xz http://ftp.osuosl.org/pub/funtoo/funtoo-current/snapshots/portage-current.tar.xz 1>/dev/null 2>/dev/null
		echo "done."
		echo -n "Extracting... "
		tar -xpfJ ${CACHE}/portage-current.tar.xz -C "${TEMPLATE}/usr/" 1>/dev/null 2>/dev/null
		echo "checking out the new portage..."
        cd ${TEMPLATE}/usr/portage/
        git checkout funtoo.org
        echo "done."
    else
		echo "found."
	    fi

            # make a local copy of the mini
	    echo -n "Copying filesystem... "
	    cp -a "${TEMPLATE}" ${ROOTFS} && echo "done." || exit
	) 200> "/var/lock/subsys/lxc"
fi

write_lxc_configuration

write_distro_inittab

write_distro_hostname

populate_dev

write_distro_fstab

write_distro_network

write_distro_sshd_config

write_distro_init_fixes

set_guest_root_password

#/usr/sbin/lxc-create -n ${NAME} -f ${CONFFILE} 1>/dev/null 2>/dev/null
RES=$?

if [ "${RES}" != "0" ]; then
    echo "Failed to create '${NAME}'"
    exit 1
fi

echo "All done!"
echo -e "\nYou can run your container with the 'lxc-start -f ${CONFFILE} -n ${NAME}'\n - For host-side networking setup info, see ${ROOTFS}/etc/conf.d/net\n"
echo "Note that container startup will show some errors, these do not matter."
echo 
echo "To enter your container for setup WITHOUT running it, try:"
echo " # mount -t proc proc ${ROOTFS}/proc"
echo " # mount -o bind /dev ${ROOTFS}/dev"
echo " # chroot ${ROOTFS} /bin/bash"
echo " # export PS1=\"(chroot) \$PS1\""
echo " (chroot) #   <-- you are now in the guest"
echo "... or, once the container is started with:"
echo "    'lxc-start -f ${CONFFILE} -n ${NAME}'"
echo "... just use lxc-console -n ${NAME} to get a shell."
}

destroy() {

    echo -n "What is the name for the container ? [${NAME}] "
    read _NAME_

    if [ ! -z "${_NAME_}" ]; then
	NAME=${_NAME_}
    fi

    /usr/sbin/lxc-destroy -n ${NAME}
    RETVAL=$?
    if [ ! ${RETVAL} -eq 0 ]; then
	echo "Failed to destroyed '${NAME}'"
	return ${RETVAL}
    fi

    ROOTFS="./rootfs.${NAME}"

    echo -n "Shall I remove the rootfs [y/n] ? "
    read
    if [ "${REPLY}" = "y" ]; then
	rm -rf ${ROOTFS}
    fi

    return 0
}

help() {
    cat <<EOF
Usage: $0 {create|destroy|purge|help} [options]
	-q : Quiet, use vars from env or options and do not ask me.
	-i XX.XX.XX.XX/XX : IP/MASK of the container 	
		Env. Var.: IPV4
		Current/Default: ${IPV4}
	-g GATEWAY : IP address of its gateway 		
		Env. Var.: GATEWAY
		Current/Default: ${GATEWAY}
	-n NAME : name of the container 		
		Env. Var.: NAME
		Current/Default: ${NAME}
	-u UTSNAME : hostname of the container 		
		Env. Var.: UTSNAME
		Current/Default: ${UTSNAME}
	-a ARCHITECTURE : for now x86 or amd64 	
		Env. Var.: ARCH
		Current/Default: ${ARCH}
	-s SUBARCH : subarch for x86 		
		Env. Var.: SUBARCH
		Current/Default: ${SUBARCH}
	-p GUESTROOTPASS : password for root account
		Env. Var.: GUESTROOTPASS
		Current/Default: ${GUESTROOTPASS}

This script is a helper to create ${DISTRO} system containers.

To make a container, simply run: 
 
 lxc-${DISTRO} create

You can averride default by environnement variables or commandline options with this override sequence :
 default, env, cmdline option
 
 Example : 
 $ GATEWAY=10.0.0.254 ./lxc-gentoo create -i 10.0.0.1/24 -n gentooserver -u gentooserver

 An interactive script will ask you for various information.

 The first creation will download a ${DISTRO} stage3 and portage
 snapshot and store it into a cache at ${CACHE}.

Updating your cache:
 At any time you can purge the ${DISTRO} cache download by calling
 'lxc-${DISTRO} purge'.  This will cause a new stage3/portage snapshot
 to be downloaded on the next 'lxc-${DISTRO} create'.

Have fun :)

(PS: Unix hackers with a conscience do not work for morally corrupt 
     corporations or governments.  Use your powers for good!)

EOF
}

purge() {

    if [ ! -e ${CACHE} ]; then
	exit 0
    fi

    # lock, so we won't purge while someone is creating a repository
    (
	flock -n -x 200

	RES=$?
	if [ "${RES}" != "0" ]; then
	    echo "Cache repository is busy."
	    exit 1
	fi

	echo -n "Purging the download cache... "
	rm --preserve-root --one-file-system -rf ${CACHE} && echo "done" || exit 1
	exit 0

    ) 200> "/var/lock/subsys/lxc"
}

# Note: assuming uid==0 is root -- might break with userns??
if [ "$(id -u)" != "0" ]; then
	echo "This script should be run as 'root'"
	exit 1
fi

CACHE="/var/cache/lxc/${DISTRO}"

OPTIND=2
while getopts "i:g:n:u:a:p:q" opt
do
        case $opt in
                i) IPV4=$OPTARG ;;
                g) GATEWAY=$OPTARG ;;
                n) NAME=$OPTARG ;;
                u) UTSNAME=$OPTARG ;;
                a) ARCH=$OPTARG ;;
		p) GUESTROOTPASS=$OPTARG ;;
		q) QUIET=Yes ;;
                \?) ;;
        esac
done

case "$1" in
    create)
	create;;
    destroy)
	destroy;;
    help)
	help;;
    purge)
	purge;;
    *)
	help	
	exit 1;;
esac

